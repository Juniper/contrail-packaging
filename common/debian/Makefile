PWD := ${CURDIR}
SB_TOP := $(PWD:/tools/packaging/common/debian=)
SRC_VER := $(shell cat $(SB_TOP)/controller/src/base/version.info)
BUILDTIME := $(shell date -u +%y%m%d%H%M)

ifdef CONTRAIL_SKU
  export CONTRAIL_SKU
else
  export CONTRAIL_SKU := havana
endif

VERSION = 
ifdef TAG
VERSION = $(SRC_VER)-$(TAG)
else
VERSION = $(SRC_VER)-$(BUILDTIME)
endif

PACKAGES = contrail-libs-deb \
	contrail-analytics-venv-deb \
	contrail-analytics-deb \
	contrail-dns-deb \
	contrail-vrouter-deb \
	contrail-vrouter-init-deb \
	contrail-config-venv-deb \
	contrail-config-deb \
	contrail-config-extension-deb \
	contrail-control-deb \
	contrail-api-lib-deb \
	contrail-nova-vif-deb \
	contrail-nodejs-deb \
	contrail-webui-deb \
	contrail-nodemgr-deb \
	contrail-setup-deb \
	ifmap-server-deb \
	supervisord-deb \
	contrail-openstack-deb \
	contrail-openstack-analytics-deb \
	contrail-openstack-config-deb \
	contrail-openstack-config-grizzly-deb \
	contrail-openstack-control-deb \
	contrail-openstack-database-deb \
	contrail-openstack-vrouter-deb \
	contrail-openstack-webui-deb \
	contrail-fabric-utils-deb \
	contrail-test-deb \
	euca2ools-deb \
	contrail-database-venv-deb \
	contrail-database-deb \
	python-boto-deb \
	libvirt-deb \
	contrail-openstack-dashboard-deb \
	contrail-ostack-dashboard-deb

all: ${PACKAGES}
	@echo "Build complete"

clean: $(PACKAGES:%-deb=%-clean)
	@echo "Clean"

ifmap-server-deb:
	$(eval BUILDDIR=${SB_TOP}/build/third_party/ifmap-server)
	mkdir -p ${SB_TOP}/third_party
	cp -R ${SB_TOP}/third_party/ifmap-server ${BUILDDIR}
	cp -R ifmap-server/debian ${BUILDDIR}/debian
	(cd ${BUILDDIR}; fakeroot debian/rules clean)
	(cd ${BUILDDIR}; fakeroot debian/rules binary)

ifmap-server-clean:
	$(eval BUILDDIR=${SB_TOP}/build/third_party/ifmap-server)
	rm -rf ${BUILDDIR}

contrail-install-packages-deb:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-install-packages)
	mkdir -p ${BUILDDIR}
	cp -ar ${SB_TOP}/tools/packaging/common/debian/contrail-install-packages/debian ${BUILDDIR}
	(cd ${BUILDDIR}; fakeroot debian/rules clean)
	(cd ${BUILDDIR}; fakeroot debian/rules binary)
	@echo "Wrote: ${BUILDDIR}/../contrail-install-packages_$(VERSION)~$(CONTRAIL_SKU)_all.deb"

contrail-install-packages-clean:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-install-packages)
	rm -rf ${BUILDDIR}

contrail-storage-packages-deb:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-storage-packages)
	mkdir -p ${BUILDDIR}
	cp -ar ${SB_TOP}/tools/packaging/common/debian/contrail-storage-packages/debian ${BUILDDIR}
	(cd ${BUILDDIR}; fakeroot debian/rules clean)
	(cd ${BUILDDIR}; fakeroot debian/rules binary)
	@echo "Wrote: ${BUILDDIR}/../contrail-storage-packages_$(VERSION)~$(CONTRAIL_SKU)_all.deb"

contrail-storage-packages-clean:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-storage-packages)
	rm -rf ${BUILDDIR}

contrail-fabric-utils-deb:
	$(eval BUILDDIR=${SB_TOP}/build/third_party/contrail-fabric-utils)
	cp -R ${SB_TOP}/third_party/fabric-utils ${BUILDDIR}
	cp -R contrail-fabric-utils/debian ${BUILDDIR}/debian
	(cd ${BUILDDIR}; fakeroot debian/rules clean)
	(cd ${BUILDDIR}; fakeroot debian/rules binary)
	(mkdir -p $(SB_TOP)/build/tools/; cd ${SB_TOP}/third_party/; tar -cvzf $(SB_TOP)/build/tools/contrail-fabric-utils-$(VERSION)~$(CONTRAIL_SKU).tgz fabric-utils)
	@echo "Wrote: $(SB_TOP)/build/tools/contrail-fabric-utils-$(VERSION)~$(CONTRAIL_SKU).tgz"

contrail-fabric-utils-clean:
	$(eval BUILDDIR=${SB_TOP}/build/third_party/contrail-fabric-utils)
	$(eval TGZ_FILE=$(SB_TOP)/build/tools/contrail-fabric-utils-$(VERSION)~$(CONTRAIL_SKU).tgz)
	rm -rf ${BUILDDIR}
	rm -rf ${TGZ_FILE}

contrail-test-deb:
	(mkdir -p $(SB_TOP)/build/tools/; cd ${SB_TOP}/third_party/; tar -cvzf $(SB_TOP)/build/tools/contrail-test-$(VERSION)~$(CONTRAIL_SKU).tgz contrail-test)
	@echo "Wrote: $(SB_TOP)/build/tools/contrail-test-$(VERSION)~$(CONTRAIL_SKU).tgz"

contrail-test-clean:
	$(eval TGZ_FILE=$(SB_TOP)/build/tools/contrail-test-$(VERSION)~$(CONTRAIL_SKU).tgz)
	rm -rf ${TGZ_FILE}

euca2ools-deb:
	$(eval BUILDDIR=${SB_TOP}/third_party/euca2ools)
	cp -R euca2ools/debian ${BUILDDIR}/debian
	(cd ${BUILDDIR}; fakeroot debian/rules clean)
	(cd ${BUILDDIR}; fakeroot debian/rules binary)

euca2ools-clean:
	$(eval BUILDDIR=${SB_TOP}/third_party/euca2ools)
	rm -rf ${BUILDDIR}/debian

python-boto-deb:
	$(eval BUILDDIR=${SB_TOP}/third_party/python-boto)
	cp -R python-boto/debian ${BUILDDIR}/debian
	(cd ${BUILDDIR}; fakeroot debian/rules clean)
	(cd ${BUILDDIR}; fakeroot debian/rules binary)

python-boto-clean:
	$(eval BUILDDIR=${SB_TOP}/third_party/python-boto)
	rm -rf ${BUILDDIR}/debian

contrail-openstack-dashboard-deb:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-openstack-dashboard)
	mkdir -p ${BUILDDIR}/debian
	cp -R ${SB_TOP}/contrail-horizon/* ${BUILDDIR}
	if [ '${CONTRAIL_SKU}' != 'grizzly' ]; then \
		(cp -R contrail-openstack-dashboard/debian/havana/* ${BUILDDIR}/debian); \
	else \
		(cp -R contrail-openstack-dashboard/debian/grizzly/* ${BUILDDIR}/debian); \
	fi
	(cd ${BUILDDIR}; fakeroot debian/rules binary)

contrail-openstack-dashboard-clean:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-openstack-dashboard)
	rm -rf ${BUILDDIR}

contrail-ostack-dashboard-deb:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-ostack-dashboard)
	mkdir -p ${BUILDDIR}/debian
	cp -R ${SB_TOP}/distro/openstack/horizon/* ${BUILDDIR}
	cp -prf ${SB_TOP}/distro/openstack/horizon/.git ${BUILDDIR}
	if [ '${CONTRAIL_SKU}' != 'grizzly' ]; then \
		(cp -R contrail-ostack-dashboard/debian/havana/* ${BUILDDIR}/debian); \
	else \
		(cp -R contrail-ostack-dashboard/debian/grizzly/* ${BUILDDIR}/debian); \
	fi
	(cd ${BUILDDIR}; fakeroot debian/rules binary)

contrail-ostack-dashboard-clean:
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-ostack-dashboard)
	rm -rf ${BUILDDIR}

libvirt-deb:
	$(eval LIBDIR=${SB_TOP}/third_party/libvirt)
	$(eval BUILDDIR=${SB_TOP}/build/debian)
	rm -rf ${LIBDIR}/libvirt-0.9.8
	(cd ${LIBDIR}; dpkg-source -x libvirt_0.9.8-2ubuntu17.17.dsc)
	(cd ${LIBDIR}; patch -p0 -i libvirt.ubuntu.patch)
	(cd ${LIBDIR}; patch -p0 -i libvirt.ubuntu.test-disable.patch)
	(cd ${LIBDIR}; patch -p0 -i libvirt_0.9.8_17.17.ubuntu.version.patch)
	(cd ${LIBDIR}/libvirt-0.9.8; dpkg-buildpackage -b -uc)
	(cd ${LIBDIR}; mv libvirt0_0.9.8-2ubuntu17.17_amd64.deb ${BUILDDIR})
	(cd ${LIBDIR}; mv libvirt-bin_0.9.8-2ubuntu17.17_amd64.deb ${BUILDDIR})
	(cd ${LIBDIR}; mv python-libvirt_0.9.8-2ubuntu17.17_amd64.deb ${BUILDDIR})
	(cd ${LIBDIR}; rm *.deb)

libvirt-clean:
	$(eval LIBDIR=${SB_TOP}/third_party/libvirt)
	rm -rf ${LIBDIR}/libvirt-0.9.8

%-deb:
	(cd $(@:-deb=); fakeroot debian/rules clean)
	(cd $(@:-deb=); fakeroot debian/rules binary)

%-clean:
	(cd $(@:-clean=); fakeroot debian/rules clean)

contrail-openstack-config-deb:
	if [ '${CONTRAIL_SKU}' != 'grizzly' ]; then \
		(cd $(@:-deb=); fakeroot debian/rules clean); \
		(cd $(@:-deb=); fakeroot debian/rules binary); \
	fi

contrail-openstack-config-grizzly-deb:
	if [ '${CONTRAIL_SKU}' = 'grizzly' ]; then \
		(cd $(@:-deb=); fakeroot debian/rules clean); \
		(cd $(@:-deb=); fakeroot debian/rules binary); \
	fi

contrail-vrouter-deb: contrail-libs-deb
	$(eval BUILDDIR=${SB_TOP}/build/debian/contrail-vrouter)
	mkdir -p ${BUILDDIR}
	$(eval BUILDKVER=3.8.0-29-generic)
	$(eval DISTRODIR=/lib/modules/${BUILDKVER}/build)
	(cd contrail-vrouter; fakeroot debian/rules binary OSVER=${BUILDKVER})
	$(eval KVER=$(shell uname -r))
	$(eval BUILDKVER=3.2.0-58-generic)
	$(eval DISTRODIR=/lib/modules/${BUILDKVER}/build)
	if [ -d ${DISTRODIR} ] && [ '${KVER}' != '${BUILDKVER}' ]; then \
                (cd contrail-vrouter; fakeroot debian/rules clean); \
		(cd contrail-vrouter; fakeroot debian/rules binary OSVER=${BUILDKVER}); \
        fi
	$(eval BUILDKVER=3.2.0-51-generic)
	$(eval DISTRODIR=/lib/modules/${BUILDKVER}/build)
	if [ -d ${DISTRODIR} ] && [ '${KVER}' != '${BUILDKVER}' ]; then \
                (cd contrail-vrouter; fakeroot debian/rules clean); \
		(cd contrail-vrouter; fakeroot debian/rules binary OSVER=${BUILDKVER}); \
        fi
