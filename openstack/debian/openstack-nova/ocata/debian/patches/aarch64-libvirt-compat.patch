Description: libvirt 2.5.0 compatibility fixes for aarch64
 libvirt 2.5.0 has a number of issues with use of logfile
 qemu directives on aarch64 machines; This patch forces
 creation of the older style console log file on arm64,
 allowing instances to boot correctly.
Author: James Page <james.page@ubuntu.com>
Forwarded: not-applicable

--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -4468,6 +4468,13 @@ class LibvirtDriver(driver.ComputeDriver
                   self._is_s390x_guest(image_meta)):
             self._create_consoles_s390x(guest_cfg, instance,
                                         flavor, image_meta)
+        elif (virt_type in ("qemu", "kvm") and
+                  self._is_arm_guest(image_meta)):
+            # NOTE(jamespage): libvirt 2.5.0 as shipped in Ubuntu zesty
+            #                  and the Pike UCA needs to be configured
+            #                  for compatibility on arm64.
+            self._create_consoles_arm(guest_cfg, instance,
+                                      flavor, image_meta)
         elif virt_type in ("qemu", "kvm"):
             self._create_consoles_qemu_kvm(guest_cfg, instance,
                                         flavor, image_meta)
@@ -4476,6 +4483,12 @@ class LibvirtDriver(driver.ComputeDriver
         s390x_archs = (fields.Architecture.S390, fields.Architecture.S390X)
         return libvirt_utils.get_arch(image_meta) in s390x_archs
 
+    def _is_arm_guest(self, image_meta):
+        arm_archs = (fields.Architecture.AARCH64,
+                     fields.Architecture.ARMV7B,
+                     fields.Architecture.ARMV7)
+        return libvirt_utils.get_arch(image_meta) in arm_archs
+
     def _create_consoles_qemu_kvm(self, guest_cfg, instance, flavor,
                                   image_meta):
         char_dev_cls = vconfig.LibvirtConfigGuestSerial
@@ -4505,6 +4518,25 @@ class LibvirtDriver(driver.ComputeDriver
                                      "sclplm")
         self._create_pty_device(guest_cfg, char_dev_cls, "sclp", log_path)
 
+    def _create_consoles_arm(self, guest_cfg, instance, flavor, image_meta):
+        char_dev_cls = vconfig.LibvirtConfigGuestConsole
+        log_path = self._get_console_log_path(instance)
+        if CONF.serial_console.enabled:
+            if not self._serial_ports_already_defined(instance):
+                num_ports = hardware.get_number_of_serial_ports(flavor,
+                                                                image_meta)
+                self._check_number_of_serial_console(num_ports)
+                self._create_serial_consoles(guest_cfg, num_ports,
+                                             char_dev_cls, log_path)
+        else:
+            # NOTE(jamespage): Force creation of file device for compatibility
+            #                  with aarch64 + libvirt 2.5.0
+            self._create_file_device(guest_cfg, instance, char_dev_cls,
+                                     force=True)
+        # NOTE(jamespage): Skip creation of pty devices; they only work with
+        #                  the virtio driver which does not capture early
+        #                  boot on aarch64
+
     def _create_pty_device(self, guest_cfg, char_dev_cls, target_type=None,
                            log_path=None):
         def _create_base_dev():
@@ -4542,8 +4574,8 @@ class LibvirtDriver(driver.ComputeDriver
                 guest_cfg.add_device(_create_base_dev())
 
     def _create_file_device(self, guest_cfg, instance, char_dev_cls,
-                            target_type=None):
-        if self._is_virtlogd_available():
+                            target_type=None, force=False):
+        if self._is_virtlogd_available() and not force:
             return
 
         consolelog = char_dev_cls()
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -3679,6 +3679,7 @@ class LibvirtConnTestCase(test.NoDBTestC
                 return_value=4)
     @mock.patch.object(libvirt_driver.libvirt_utils, 'get_arch',
                        side_effect=[fields.Architecture.X86_64,
+                                    fields.Architecture.X86_64,
                                     fields.Architecture.S390,
                                     fields.Architecture.S390X])
     def test_create_serial_console_devices_with_limit_exceeded_based_on_arch(
@@ -4108,6 +4109,29 @@ class LibvirtConnTestCase(test.NoDBTestC
         self.assertEqual("pty", terminal_device.type)
         self.assertEqual("s390-ccw-virtio", cfg.os_mach_type)
 
+    @mock.patch.object(libvirt_driver.libvirt_utils, 'get_arch',
+                       return_value=fields.Architecture.AARCH64)
+    def test_get_guest_config_with_type_kvm_on_aarch64(self, mock_get_arch):
+        self.flags(enabled=False, group='vnc')
+        self.flags(virt_type='kvm',
+                   use_usb_tablet=False,
+                   group='libvirt')
+
+        self._stub_host_capabilities_cpu_arch(fields.Architecture.AARCH64)
+
+        instance_ref = objects.Instance(**self.test_instance)
+
+        cfg = self._get_guest_config_via_fake_api(instance_ref)
+
+        self.assertIsInstance(cfg.devices[0],
+                              vconfig.LibvirtConfigGuestDisk)
+        self.assertIsInstance(cfg.devices[1],
+                              vconfig.LibvirtConfigGuestDisk)
+        log_file_device = cfg.devices[2]
+        self.assertIsInstance(log_file_device,
+                              vconfig.LibvirtConfigGuestConsole)
+        self.assertEqual("file", log_file_device.type)
+
     def _stub_host_capabilities_cpu_arch(self, cpu_arch):
         def get_host_capabilities_stub(self):
             cpu = vconfig.LibvirtConfigGuestCPU()
