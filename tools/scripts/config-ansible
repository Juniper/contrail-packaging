#!/usr/bin/env /usr/bin/python
"""
Copyright (c) 2013, Juniper Networks, Inc.
All rights reserved.
Author : Michael Ganley

Ansible configuration wrapper script.
"""

import argparse
import os
import sys
import socket
import shlex
import subprocess
import shutil





class AnsibleConfig(object):
    """ Anisble Config class to parse and execute the build commands """

    def __init__(self, options):
        self.opt = options

        if not self.opt.hostname:
            self.opt.hostname =  socket.gethostname()

        if self.opt.hostname == 'localhost':
            print "Can't have hostname of localhost"
            sys.exit()

        self.opt.ip = socket.gethostbyname(self.opt.hostname)
        if self.opt.ip == '127.0.0.1':
             print 'Cannot get the local IP address \n' \
                   'Edit your /etc/hosts and remove your hostname from the loopback line (127.0.0.1)'
             sys.exit(1)

        if self.opt.local_file:
            if not os.path.isfile(self.opt.local_file):
                print "ERROR: Can't find local YML file: %s" % self.opt.local_file
                sys.exit(1)
            else:
                command = "sshpass -p c0ntrail123 scp -o StrictHostKeyChecking=no " + self.opt.local_file
                command += " contrail@" + str(self.opt.remote_hostname) + ":"
                execute(command, ignore_errors=False)

    def config(self):
        """
        Now take care of stuff
        """
        if DEBUG:
            print 'DEBUG: config got called'

        print "Calling Remote Host to run Ansible \n" \
              "This can take quite sometime"
        print "Log file is ansible.log"

        command = 'sshpass -p c0ntrail123 ssh '
        command += str(self.opt.user_name) + "@" + str(self.opt.remote_hostname)
        command += " config-ansible-server " + "-n " + str(self.opt.hostname)
        command += " -i " + str(self.opt.ip)

        print "\nConfiguring server"
        fcommand = command + " -s " + str(self.opt.set) + " -d " + str(self.opt.distro)
        if self.opt.local_file:
            fcommand += " -f " + str(self.opt.local_file)
        fcommand += " config"
        output = execute(fcommand, ignore_errors=False)
        file = open ('ansible.log', 'w')
        file.write (str(output))
        file.close()

        print "VM should be configured, but please check the log file for errors or warnings"
        print "Only errors running the ansible command itself will be printed here"
        print "Any errors installing packages will be in the log file."
        
    def key (self):

        """ Key from contrail-ec-build03
            Will have to validate that we are either
            root or have sudo """

        key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiCxOrajurNpQbFvTqdYlpmhLp9K24O/XsksEZlf4G1jXKYwndjWj1hCnhgmNSjS2iKAxYfaB296vv1DH5bh9VYxF+ZRGIFTB/170FzsWpCK5fPKweJbD15RWzRrCqsvP/iH1qkQxlokuRXR7rVUyNux/yjFwn7ZnAjU8SCo1QqgDIX0yNrj0N5nVxjLTI0o+uCJJFNI6dt/BKQzYGmFVA0dEZSKDI413JTV5yHbrNXKJbAnrbZGQ0OVumdWKcTjXczffppvu6cOJgeAz+nEadZpMYwDDRXzmbrEYRDiNUvBrL8B/3Uu1iTmP+wfUy9Ts3ccB4WI0Js4i/xwekmvfr Contrail-Ansible\n"

        print "Update key called."
        print "NOTE: Need to run as root to write this key"

        if not os.getuid() == '0':
            if DEBUG:
                print "DEBUG: Not running as root, checking if under sudo"

            try:
                pipe = subprocess.Popen(shlex.split("ls /root"),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)
                data = pipe.stdout.read()
                rc = pipe.wait()
                cwd = os.getcwd()

            except IOError as e:
                if DEBUG:
                    print "DEBUG: Got exception"
                if (e[0] == errno.EPERM):
                    print >> sys.stderr, "Not running as root or under sudo"
                sys.exit(1)

        if DEBUG:
            print "DEBUG: Running with sufficient permissions"

        if not os.path.isdir ("/root/.ssh"):
            command = "mkdir -p /root/.ssh"
            execute(command, ignore_errors=False)

            command = "chmod 700 /root/.ssh"
            execute(command, ignore_errors=False)

        file = open ('/root/.ssh/authorized_keys', 'a')
        file.seek (0, 2)
        file.write (key)
        file.close()

        command= "chmod 600 /root/.ssh/authorized_keys"
        execute(command, ignore_errors=False)
        print "root .ssh/authorized_keys file updated successfully"

        print "Adding host key to remote known_hosts"

        command = "sshpass -p c0ntrail123 scp -o StrictHostKeyChecking=no /etc/ssh/ssh_host_rsa_key.pub " + "contrail@" + self.opt.remote_hostname + ":"
        command += "ssh_host_rsa_key.pub." + self.opt.hostname
        execute (command, ignore_errors=False)

        command = "sshpass -p c0ntrail123 ssh contrail@" + self.opt.remote_hostname + " install-key " + self.opt.hostname + " " + self.opt.ip
        execute (command, ignore_errors=False)


def execute(command, ignore_errors=False):
    """ Function to execute shell command and return the output """

    if DEBUG:
        print 'DEBUG: %s' % (command)
    pipe = subprocess.Popen(shlex.split(command),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)

    data = pipe.stdout.read()
    rc = pipe.wait()
    cwd = os.getcwd()
    if rc and not ignore_errors:
        print 'Error : Working directory : %s' % (cwd)
        print 'Error : Failed to execute command: %s\n%s' % (command, data)
        sys.exit(1)
    return data.strip()

def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0


def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Ansible wrapper script to configure VM ')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-n', '--name', nargs='?', dest='hostname',
                        help='local hostname,')

    parser.add_argument('-r', '--remote', nargs='?', dest='remote_hostname',
                        default='contrail-ec-build03',
                        help='Remote host to contact that will run ansible, \n \
                        default : %(default)s')

    parser.add_argument('-u', '--user', nargs='?', dest='user_name',
                        default='contrail',
                        help='Remote user to login as to run ansible, \n \
                              default : %(default)s')

    parser.add_argument('-d', '--distro', nargs='?', dest='distro',
                        default='centos64_os',
                        help='distribution to config (centos64_os, ubuntu-12-04, \n \
                              default : %(default)s')

    parser.add_argument('-s', '--set', nargs='?', dest='set',
                        default='base',
                        help='set of packages to install, \n \
                              default : %(default)s')

    parser.add_argument('-f',  '--file', nargs='?', dest='local_file',
                        help='local yml file to execute as well')



    subparsers = parser.add_subparsers(title='Config Ansible Commands',
                                       description='Select one command',
                                       dest='command')

    parser_config = subparsers.add_parser('config',
                                           description='Configures the current machine with the \
                                           packages necessary to build Contrail')

    parser_key = subparsers.add_parser('key',
                        description='Write out the remote host ssh key to root user. \n \
                        This is needed for ansible to run and configure this system. \n \
                        The key only has to be written out once')

    opt = parser.parse_args(args)
    return opt


if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    config = AnsibleConfig(options)

    if not cmd_exists("scp"):
        print "Error: Missing scp command.  Please install the ssh clients and utilities"
	sys.exit(1)

    if not cmd_exists("sshpass"):
        print "Missing sshpass command.  Please install the sshpass command"
	sys.exit(1)

    if config.opt.command == 'key':
        config.key()
        sys.exit(0)

    if config.opt.command == 'config':
        config.config()
        sys.exit(0)

    print "Unknown command: ", config.opt.command
    sys.exit(1)
