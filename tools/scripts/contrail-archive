#!/usr/bin/python

import argparse
import os
import sys
import glob
import shlex
import subprocess

archiveBaseDir = "/volume/contrail/"

class ContrailArchive(object):
    """ contrailBuild class to parse and execute the build commands """

    def __init__(self, options):
        global manifestRealPath
        self.opt = options
        if not self.opt.build_num:
            print 'Error: Need a build number to archive'
            sys.exit(1)
        if not self.opt.branch_name:
            print 'Error: Need a branch to archive'
            sys.exit(1)

        require_arch = '''
            centos64_os
            centos65
            ubuntu-12-04
            ubuntu-14-04
            redhat70
        '''.split()
        if not self.opt.arch_type in require_arch:
            print 'Error: Only ' + ', '.join(require_arch) + ' are currently supported'
            sys.exit(1)

        if not os.path.exists(".repo"):
            path = str(self.opt.sandbox_name)
            path += '/.repo'
            if not os.path.exists(path):
                print 'Error cannot find sandbox'
                sys.exit(1)
            os.chdir (self.opt.sandbox_name)


        """
        Add Checking for Path to the archive directory
        """
        archivePath = archiveBaseDir + self.opt.branch_name + "/" + self.opt.build_num + "/"
        archivePath += self.opt.arch_type + "/" + self.opt.sku_name

        if not os.path.exists(archivePath):
            print "Error: Can't find build archive path: %s" % archivePath
            sys.exit(1)
        self.opt.archive_path = archivePath

    def archive(self):
        """
        Now finish up with the repo sync command
        """
        if DEBUG:
            print 'Archive got called'


        """
        Copy the sandbox to the archive.
        """
        print "Archiving build to: %s" % self.opt.archive_path

        pkg_repo = "store/" + self.opt.build_num + "/pkg_repo"
        if os.path.isdir(pkg_repo):
            command = "rm -rf " + pkg_repo
            execute(command, ignore_errors=True)
            
        sandbox_path = os.getcwd()

        if not os.path.isdir ("build-info"):
            os.mkdir ("build-info")

        command = "cp  third_party/packages.xml build-info/third_party_packages.xml"
        execute (command, ignore_errors=False)
        command = "cp  distro/third_party/packages.xml build-info/distro_packages.xml"
        execute(command, ignore_errors=False)
        csshared = "/volume/junosv-storage01/contrail/build/" + self.opt.arch_type + "/" + self.opt.sku_name + "/ivy.xml"
        if os.path.isfile(csshared):
            command = "cp " + csshared + " build-info"
            execute(command, ignore_errors=False)

        command = "tar czf catalog.tgz build-info"
        execute (command, ignore_errors=False)

        # command = "rm -rf build-info"
        # execute(command, ignore_errors=False)

        path = self.opt.archive_path + "/build-info"
        # os.mkdir (path)

        command = "cp catalog.tgz " + path
        execute(command, ignore_errors=False)


        # No longer have to make this diretory
        # os.mkdir (self.opt.archive_path + "/artifacts")
        store_path = sandbox_path + "/build"
        os.chdir(store_path)
        for files in glob.iglob("artifacts*"):
            command = "cp -r " + files + " " + self.opt.archive_path
            execute(command, ignore_errors=False)
        os.chdir (sandbox_path)

        """
        Copy the sandbox
        """

        print "Copying the Sandbox"
        path = self.opt.archive_path + "/store"
        os.mkdir (path)
        path = self.opt.archive_path + "/store/sandbox"
        os.mkdir (path)
        os.chdir (sandbox_path)
        command = "cp -r . " + path
        execute(command, ignore_errors=False)

        """
        Fix up the archive
        """
        print "Fixing up the archive"
        os.chdir (self.opt.archive_path + "/artifacts")

        # add link to storage package with os name
        for files in glob.iglob("contrail-storage-packages*"):
            newfilename = self.opt.arch_type + files.split('~')[-1]
            newfilename = "~".join([files.split('~')[0], newfilename])
            command = "ln -s %s %s" % (files, newfilename)
            execute(command, ignore_errors=False)

        # add link to server manager package with os name
        for files in glob.iglob("contrail-server-manager-installer*"):
            newfilename = self.opt.arch_type + files.split('~')[-1]
            newfilename = "~".join([files.split('~')[0], newfilename])
            command = "ln -s %s %s" % (files, newfilename)
            execute(command, ignore_errors=False)

        for files in glob.iglob("contrail-install*"):
            newfilename = self.opt.arch_type + files.split('~')[-1]
            newfilename = "~".join([files.split('~')[0], newfilename])
            command = "cp " + files + " .."
            execute(command, ignore_errors=False)
            command = "rm " + files
            execute(command, ignore_errors=False)
            command = "ln -s %s %s" % (os.path.join('..', files), newfilename)
            execute(command, ignore_errors=False)

        for files in glob.iglob("*.iso"):
            command = "cp " + files + " .."
            execute(command, ignore_errors=False)
            command = "rm " + files
            execute(command, ignore_errors=False)



        """
        Creating links to binaries
        """

        path = self.opt.archive_path + "/store"
        os.chdir (path)
        os.mkdir ("binaries")
        os.chdir ("binaries")
        os.symlink ("../sandbox/build/debug/control-node/contrail-control", "contrail-control")
        os.symlink ("../sandbox/build/debug/dns/contrail-dns", "contrail-dns")
        os.symlink ("../sandbox/build/debug/query_engine/qed", "qed")
        os.symlink ("../sandbox/build/debug/analytics/vizd", "vizd")
        os.symlink ("../sandbox/vrouter/vrouter.ko", "vrouter.ko")

	#Since tor agent is available from R2.1+ releases, we need this check
	if os.path.isfile("../sandbox/build/debug/vnsw/agent/ovs_tor_agent/contrail-tor-agent"):
	    os.symlink ("../sandbox/build/debug/vnsw/agent/ovs_tor_agent/contrail-tor-agent", "contrail-tor-agent")

        # On Ubuntu, we find the packaged c-v-a in the build//packages dir, but on CentOS
        # and RedHat, the packages dir is different, and it's been removed by the time
        # we get here. So we use the original c-v-a exe that went into CentOS/RedHat pkg
        vrouter_agent = [
            "../sandbox/build/packages/contrail/usr/bin/contrail-vrouter-agent", # Ubuntu
            "../sandbox/build/debug/vnsw/agent/contrail/contrail-vrouter-agent"  # CentOS/RedHat
        ]

        if os.path.isfile(vrouter_agent[0]):
            os.symlink (vrouter_agent[0], "contrail-vrouter-agent")
        elif os.path.isfile(vrouter_agent[1]):
            os.symlink (vrouter_agent[1], "contrail-vrouter-agent")
        else:
            print 'Warning : Could not symlink contrail-vrouter-agent executable, skipping'


def execute(command, ignore_errors=False):
    """ Function to execute shell command and return the output """

    if DEBUG:
        print 'DEBUG: %s' % (command)
    pipe = subprocess.Popen(shlex.split(command),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)

    data = pipe.stdout.read()
    rc = pipe.wait()
    cwd = os.getcwd()
    if rc and not ignore_errors:
        print 'Error : Working directory : %s' % (cwd)
        print 'Error : Failed to execute command: %s\n%s' % (command, data)
        sys.exit(1)
    return data.strip()

def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0


def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Contrail build wrapper script ')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-s', '--sandbox', nargs='?', dest='sandbox_name',
                        default='sandbox',
                        help='New directory name for the sandbox, default : %(default)s')

    parser.add_argument('-n', '--number',  dest='build_num',
                        help='Build number to get manifest from')

    parser.add_argument('-b', '--branch', nargs='?', dest='branch_name',
                        default='mainline',
                        help='Branch to use to fetch manifest file')

    parser.add_argument('-k', '--sku', nargs='?', dest='sku_name',
                        default='grizzly',
                        help='Tag to use when creating packages')

    parser.add_argument('-a', '--arch', nargs='?', dest='arch_type',
                        default='centos64_os',
                        help='Branch to use to fetch manifest file')

    subparsers = parser.add_subparsers(title='ContrailBuild Commands',
                                       description='Select one command',
                                       dest='command')

    parser_archive = subparsers.add_parser('archive',
                                           description='Archives sandbox')
    opt = parser.parse_args(args)
    return opt


if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    build = ContrailArchive(options)

    """ Test to make sure all our commands exist """



    if build.opt.command == 'archive':
        build.archive()
        sys.exit(0)

    print "Unknown architecture: ", build.opt.arch_type
    sys.exit(1)
