#!/usr/bin/env bash
#set -x

#export WORKSPACE="/ecbuilds/PipeLine/sb"
export WORKSPACE="$PWD"
#repos="controller vrouter tools/generateds tools/sandesh tools/packaging tools/packages tools/provisioning contrail-web-storage contrail-web-controller contrail-web-core contrail-webui-third-party third_party/fabric-utils third_party/contrail-test tools/contrail-server-manager tools/puppet openstack/neutron_plugin contrail-horizon contrail-web-ui tools/build third_party openstack/nova_contrail_vif distro distro/openstack/neutron"
manifest_file="$WORKSPACE/.repo/manifest.xml"
#build_loc="/volume/contrail"
build_loc="/github-build"

if [ -L $manifest_file ]; then
    repos=`cat $manifest_file | grep "remote=\"github" | grep -v refs | awk -F "path\=" '/path/ {print $2}' | sed -e 's/\"//g' | sed -e 's/\/>//' | sed -e 's/>//'`
fi

usage ()
{
    echo
    echo 'Usage 1 : ./commit-info  -release <R1.05|R1.06|R1.10|mainline> -build <bno1[,bno2]> [-os <ubuntu-12-04|centos64_os>] [-sku <havana|icehouse>]'
    echo 'Eg.       ./commit-info  -release R1.10 -build 2'
    echo
    echo 'Usage 2 : ./commit-info  -manifest <manifest1> <manifest2>'
    echo 'Eg.       ./commit-info  -manifest manifest_2304.xml manifest_2305.xml'
    echo
    exit
}

function parse_arguments() {
    while echo $1 | grep -q ^-; do
        eval $( echo $1 | sed 's/^-//' )=$2
        shift
        shift
    done

    [ "x$sku" = "x" ] && sku=havana
    [ "x$os" = "x" ] && os=ubuntu-12-04
    [ "x$release" = "x" ] && usage
    [ "x$build" = "x" ] && usage
    [ "$os" != "centos64_os" -a "$os" != "ubuntu-12-04" ] && usage
    [ "$sku" != "havana" -a "$sku" != "icehouse" ] && usage

    build1=`echo $build | cut -d ',' -f1`
    build2=`echo $build | cut -d ',' -f2`
    [ $build1 = $build2 ] && build2="LATEST"
 
    sbver=`cat $manifest_file | awk -F "revision\=" '/revision/ {print $2}' | grep vrouter | cut -d ' ' -f1 | sed -e 's/\"//g'`
    [ "x$sbver" = "x" ] && sbver=mainline
    if [ "x$sbver" != "x$release" ]; then
        echo
        echo "Release version field is incorrect!"
        echo "Your sandbox is of different version!"
        echo
        exit 1
    fi
}

function check_sb() {
    cd $WORKSPACE
    if [ ! -d controller -o ! -d vrouter -o ! -d tools -o ! -d contrail-web-core -o ! -d third_party -o ! -d openstack -o ! -d contrail-horizon ]; then
        echo "You need to run this utility from sandbox location !"
        exit 1
    fi  
}

function get_git_ids_4_manifest() {
    check_sb
    
    [ "x$2" = "x" ] && usage
    [ "x$3" = "x" ] && usage
    [ ! -f $2 -o ! -f $3 ] && echo && echo "File not found!" && echo && exit 1
    GetGitCommitIds=`/ecbuilds/utils/getgitcommits.py $2 $3`
}

function get_git_ids() {
    check_sb

    [ $build2 = "LATEST" ] && build2=`ls -l $build_loc/$release/$build2 | tr -s ' ' | cut -d ' ' -f11`
    [ $build1 = "LATEST" ] && build1=`ls -l $build_loc/$release/$build1 | tr -s ' ' | cut -d ' ' -f11`

    if [ $build1 = $build2 ]; then
        echo
        echo "Unsupported operation !"
        exit 1
    fi

    GetGitCommitIds=`/ecbuilds/utils/getgitcommits.py $build_loc/$release/$build1/$os/$sku/manifest.xml $build_loc/$release/$build2/$os/$sku/manifest.xml`
}

function parse_commit_ids() {
    echo "GitId                                      When         Author and Description"
    echo "-----                                      ----         ----------------------"
    for repodir in $repos
    do
        if [ -d $WORKSPACE/$repodir ]; then
            cd $WORKSPACE/$repodir
            NO_COMMITS=0
            echo
            echo "Changes from git in $repodir:"
            for gitid in $GetGitCommitIds
            do
                git show $gitid > /dev/null 2>&1
                if [ $? = 0 ]; then
                    string=`git show --pretty=format:"%H    %ar    %an --> %s%n" $gitid -s | cat`
                    echo $string | sed -e 's/ /   /' | awk '{ print substr($0,1,200)}'
                    NO_COMMITS=`expr $NO_COMMITS \+ 1`
                fi
            done
            [ $NO_COMMITS -eq 0 ] && echo "No commits!"
        fi
    done
}

function main() {
    columns=`tput cols`
    if [ $columns -lt 200 ]; then
        echo
        read -p "Your terminal looks small, maximize it to view legible output, Continue? Type y/n [y]?" yesorno
            case "$yesorno" in
                    Y*|y*)  continue ;;
                    N*|n*)  exit 1 ;;
            esac
    fi
    [ "x$1" = "x" ] && usage
    if [ $1 = "-release" -o $1 = "-build" ]; then
        parse_arguments $*
        get_git_ids
        parse_commit_ids
    elif [ $1 = "-manifest" ]; then
        get_git_ids_4_manifest $*
        parse_commit_ids
    else
        usage
    fi
}

main $*
echo
echo Done
