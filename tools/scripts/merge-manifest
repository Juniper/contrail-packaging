#!/usr/bin/python



import argparse
import os
import sys
import socket
import shlex
import subprocess
import shutil
import github
from lxml import etree as ET
import base64



class ManifestMerge(object):
    def __init__(self, options):
        self.opt = options

        if DEBUG:
            print "init called"

        if not os.path.isfile(self.opt.build_file):
            print "Error: Can't find manifest file %s" % self.opt.build_file
            sys.exit(1)

        if not os.path.isfile(self.opt.merge_file):
            print "Error: Can't find manifest file %s" % self.opt.merge_file
            sys.exit(1)

        """ REPLACE WITH YOUR USER ID AND KEY"""
        self.opt.github = github.Github('mganley', '83236c3a4678abeda0cf2235552cac8a6b75ab9f')


    def merge(self):
        target = ET.parse(self.opt.merge_file).getroot()
        source = ET.parse(self.opt.build_file).getroot()

        for demo in target.iter('project'):
            reponame = demo.get('name')
            remote = demo.get('remote')
            if DEBUG:
                print reponame, remote

            found = 0
            for item in source.iter('project'):
                if reponame == item.get('name'):
                    found = 1
                    revhash = item.get('revision')
                    if revhash:
                        if DEBUG:
                            print "Found build hash", revhash
                        demo.set ('revision', revhash)
                    break

            if not found:
                if remote == 'github':
                    if DEBUG:
                        print "repo not in build repo going to get hash "
                        print reponame
                    repo = self.opt.github.get_user(login='Juniper').get_repo(name=reponame)
                    dbranch = demo.get('revision')
                    if (dbranch) :
                        githubBranch = repo.get_branch(branch=dbranch)
                        commits=githubBranch.commit
                    else:
                        commits=repo.get_commits()[0]
                    demo.set ('revision', commits.sha)



        return target



def execute(command, ignore_errors=False):
    """ Function to execute shell command and return the output """

    if DEBUG:
        print 'DEBUG: %s' % (command)
    pipe = subprocess.Popen(shlex.split(command),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)

    data = pipe.stdout.read()
    rc = pipe.wait()
    cwd = os.getcwd()
    if rc and not ignore_errors:
        print 'Error : Working directory : %s' % (cwd)
        print 'Error : Failed to execute command: %s\n%s' % (command, data)
        sys.exit(1)
    return data.strip()

def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='merge-manifest to create manifest based on build manifest')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-b',  '--build_manifest', nargs='?', dest='build_file',
                            default='manifest.xml',
                            help='Existing build manifest file, default: %(default)s')
    parser.add_argument('-m',  '--merge_manifest', nargs='?', dest='merge_file',
                            default='default.xml',
                            help='Target manifest to merge into the build manifest file, default: %(default)s')

    parser.add_argument('-o',  '--output_manifest', nargs='?', dest='output_file',
                            default='merge-manifest.xml',
                            help='Output file to print the results to, default: %(default)s')


    subparsers = parser.add_subparsers(title='Merge Manifest Commands',
                                       description='Select one command',
                                       dest='command')

    parser_merge = subparsers.add_parser('merge',
                                           description='Merge the target into source keeping the source revisions'
                                                       'the same and fixing the new projects revisions')


    opt = parser.parse_args(args)
    return opt

if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    manifest = ManifestMerge(options)

    if manifest.opt.command  == 'merge':
        result = manifest.merge()
        if DEBUG:
            print ET.tostring(result, pretty_print=True)

        tree = ET.ElementTree(result)
        tree.write(manifest.opt.output_file)
        print "Done"
        sys.exit(0)

    print "Unknown command"
    sys.exit(1)


