#!/usr/bin/env python2.7
"""
Copyright (c) 2013, Juniper Networks, Inc.
All rights reserved.
Author : Michael Ganley

Build wrapper script.
"""

import argparse
import os
import sys
import shlex
import glob
import subprocess
import shutil
import string



manifest_real_path = ""
cacheBaseDir = "/cs-shared/builder/cache"


class ContrailBuild(object):
    """ contrailBuild class to parse and execute the build commands """

    def __init__(self, options):
        global manifest_real_path
        self.opt = options
        if self.opt.manifest_file:
            manifest_real_path = os.path.realpath(self.opt.manifest_file)

        require_arch = '''
            centos64_os
            centos65
            centos71
            redhat70
            ubuntu-12-04
            ubuntu-14-04
            vcenter-plugin
            xen6.2SP1_os
        '''.split()

        if not self.opt.arch_type in require_arch:
            print 'Error: Only ' + ', '.join(require_arch) + ' are currently supported'
            sys.exit(1)

        """ Make sure we are in sandbox """
        required_commands = ["build", "package"]
        if self.opt.command in required_commands:
            if not os.path.exists(".repo"):
                path = str(self.opt.sandbox_name)
                path += '/.repo'
                if not os.path.exists(path):
                    print 'Error cannot find sandbox'
                    sys.exit(1)
                os.chdir (self.opt.sandbox_name)


    def sandbox(self):
        """
        Now finish up with the repo sync command
        """
        if DEBUG:
            print 'sandbox got called'

        """
        Create the sandbox and do the repo init
        """
        print "Creating Bare Sandbox using repo init"
        print "log file is checkout.log"
        command = 'repo init -u '
        command += str(self.opt.manifest_url)
        command += " -m " + str(self.opt.branch_name) + "/" + str(self.opt.arch_type) +"/manifest-" + str(self.opt.sku_name) +".xml"
        if not os.path.exists(self.opt.sandbox_name):
            os.mkdir (self.opt.sandbox_name)
        os.chdir (self.opt.sandbox_name)
        f=open("checkout.log", mode='w')
        execute(command, f, ignore_errors=False)



        """
        Manipulate the manifest.xml file based on the build number if there
        """

        print "Manipulating manifest based on supplied parameters"

        if self.opt.build_num:
            if self.opt.manifest_file:
                print "Manifest file and build number parameters both supplied"
                print "Manifest file take precedence, ignoring build number for sandbox creation"
            else:
                print "Using supplied build number: %s" % self.opt.build_num
                print "Searching for build in: %s " % self.opt.dir_name
                build_archive = self.opt.dir_name
                if not os.path.isdir(build_archive):
                    print "Can't find the build archive:", build_archive
                    sys.exit(1)
                if not build_archive[-1] == '/':
                    build_archive += '/'
                build_archive += str(self.opt.branch_name) + '/'
                build_archive += str(self.opt.build_num) + '/'
                build_archive += str(self.opt.arch_type) + '/'
                build_archive += str(self.opt.sku_name) + '/'
                build_archive += "manifest.xml"
                shutil.copyfile (build_archive, ".repo/manifest.xml")

        if self.opt.manifest_file:
            print "Using supplied manifest file: %s" % self.opt.manifest_file
            shutil.copyfile (manifest_real_path, ".repo/manifest.xml")
            shutil.copyfile (manifest_real_path, "manifest.xml")


        if not self.opt.manifest_file and not self.opt.build_num:
            print "No build number or manifest file specified, using default manifest"

        print "Syncing repositories.... this could take some time"
        execute("repo sync", f, ignore_errors=False)
        f.close()

    def build(self):
        if DEBUG:
            print 'build got called'

        print "Fetching third party libraries"
        print "Log is fetch.log"

        f = open("fetch.log", mode='w')

        # If we are building for vcenter, 3rd party dirs do not exist,
        # so the below is safe. But let everyone know.

        if os.path.isdir ("third_party"):
            command = self.opt.python + " third_party/fetch_packages.py"
            execute (command, f, ignore_errors=False)
        else:
            f.write("Info: No third_party/ dir, not running fetch_patches")

        if os.path.isdir ("distro"):
            command = self.opt.python + " distro/third_party/fetch_packages.py"
            execute (command, f, ignore_errors=False)
        else:
            f.write("Info: No distro/ dir, not running fetch_patches")

        if os.path.isdir ("contrail-webui-third-party"):
            command = self.opt.python + " contrail-webui-third-party/fetch_packages.py"
            execute (command, f, ignore_errors=False)
        else:
            f.write("Info: No contrail-webui-third-party/ dir, not running fetch_patches")

        f.close()

        print "Running top level build"
        print "Log is build.log"

        # Preference given to scons build
        if os.path.isfile("SConstruct"):
            print "Found SConstruct for scons-based build"
            # The first scons does production build, the second one is needed
            # so that we have debug symbols.
            # cmd = "scons --opt=production"
            # f = open("build.log", mode='w')
            # execute(cmd, f, ignore_errors=False)
            # f.close()

            cmd = "scons"
            # f = open("build-debug.log", mode='w')
            f = open("build.log", mode='w')
            execute(cmd, f, ignore_errors=False)
            f.close()

            # Build and bgp_stress_test on ubuntu14
            platform = os.getenv('BUILD_PLATFORM')
            if platform and platform == "ubuntu-14-04":
                print "Info: building bgp_stress_test... "
                os.putenv('NO_HEAPCHECK','TRUE')
                cmd = "scons -iu src/bgp:bgp_stress_test"
                f = open("bgp_stress_test-debug.log", mode='w')
                execute(cmd, f, ignore_errors=True)
                f.close()
                cmd = "scons --opt=production -iu src/bgp:bgp_stress_test"
                f = open("bgp_stress_test-production.log", mode='w')
                execute(cmd, f, ignore_errors=True)
                f.close()
                os.unsetenv('NO_HEAPCHECK')

        elif os.path.isfile("Makefile"):
            print "Found Makefile for make-based build"
            if not self.opt.build_num:
                self.opt.build_num = execute("date +%F-%R", ignore_errors=False)
            cmd = "make BUILDNUM=%s all" % self.opt.build_num

            f = open("build.log", mode='w')
            execute(cmd, f, ignore_errors=False)
            f.close()

    def package(self):
        if DEBUG:
            print "Package got called"

        # Need to catch the case where build number was not specified
        # Can't set it in the init routine because of the "all" parameter
        # If we set it in init for all then the sandbox command will do the
        # wrong thing.
        if not self.opt.build_num:
           command = "date +%F-%R"
           self.opt.build_num = execute(command, ignore_errors=False)



        current_dir = os.getcwd()

        # Get rid of the directories if they exist

        count=0
        if os.path.isdir ("target"):
            # Need to interate here and rename target directory
            for files in glob.iglob("target*"):
                count += 1
            target = "target-" + str(count)
            shutil.move ("target", target)
        count=0
        if os.path.isdir ("store"):
            for files in glob.iglob("store*"):
                count += 1
            target = "store-" + str(count)
            shutil.move ("store", target)

        os.mkdir ("target")
        os.mkdir ("store")

        # Find the full path to create-config

        realpath =  search_file ("create-config", os.getenv("PATH"))
        if not realpath:
            print "Couldn't find create-config in your $PATH"
            sys.exit(1)

        command = self.opt.python + " " + realpath + " -m "
        command += current_dir + "/.repo/manifest.xml -b " + str(self.opt.build_num) + " config"

        f = open("package.log", mode='w')
        print "log is package.log"
        print ("Creating configuration file for packager.py")
        os.chdir ('tools/packaging/build')
        execute(command, f, ignore_errors=False)


        print "Packaging Contrail.... this could take awhile"
        command = self.opt.python + " ./packager.py --cache-base-dir "
        command += cacheBaseDir
        execute(command, f, ignore_errors=False)
        f.close()

        # The packager will create copies of .tgz's in $SB/store, which
        # is not an efficient use of disk space. To save disk space
        # on archive storage, let's make these hard links
        artifacts_dir = os.path.join(current_dir, "build", "artifacts")
        os.chdir(os.path.join(current_dir, "store"))
        for f in glob.glob('*.tgz'):
            os.remove(f)
            os.link(os.path.join(artifacts_dir,f), f)

def execute(command, output, ignore_errors=False):
    """ Function to execute shell command and return the output """

    pipe = subprocess.Popen(shlex.split(command),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)
    data = ""
    for line in pipe.stdout:
        output.write(line)
        output.flush()
        data += line
        if not NOPRINT:
            print line.strip()


    rc = pipe.wait()
    cwd = os.getcwd()
    if rc and not ignore_errors:
        print 'Error : Working directory : %s' % (cwd)
        print 'Error : Failed to execute command: %s\n%s' % (command, data)
        sys.exit(1)
    return data.strip()

def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True, 
        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

def search_file(filename, search_path):
   """Given a search path, find file
   """
   file_found = 0
   paths = string.split(search_path, ':')
   for path in paths:
      if os.path.exists(os.path.join(path, filename)):
          file_found = 1
          break
   if file_found:
      return os.path.abspath(os.path.join(path, filename))
   else:
      return None

def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Contrail build wrapper script - version 1.07')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-q', '--quiet', dest='no_print', action='store_true',
                        help="Don\'t print output on STDOUT")

    parser.add_argument('-m', '--manifest', nargs='?', dest='manifest_file',
                        help='Manifest Filename,')

    parser.add_argument('-s', '--sandbox', nargs='?', dest='sandbox_name',
                        default='sandbox',
                        help='New directory name for the sandbox, default : %(default)s')

    parser.add_argument('-p', '--python', nargs='?', dest='python',
                        default='python',
                        help='Path to alternate version of python to use, default : %(default)s')

    parser.add_argument('-u', '--url', dest='manifest_url',
                        default='git@github.com:Juniper/contrail-vnc-private',
                        help='Repository URL to download the manifest file, default : %(default)s')

    parser.add_argument('-n', '--number', nargs='?', dest='build_num',
                        help='Build number to get manifest from')

    parser.add_argument('-b', '--branch', nargs='?', dest='branch_name',
                        default='mainline',
                        help='Branch to use to fetch manifest file')

    parser.add_argument('-d', '--dir', nargs='?', dest='dir_name',
                        default='/volume/contrail/',
                        help='Base directory to search for archived daily builds')

    parser.add_argument('-k', '--sku', nargs='?', dest='sku_name',
                        default='kilo',
                        help='SKU to use to fetch manifest file or TAG to use in packaging')

    parser.add_argument('-a', '--arch', nargs='?', dest='arch_type',
                        default='centos64_os',
                        help='Architecture to use to fetch manifest file')

    subparsers = parser.add_subparsers(title='ContrailBuild Commands',
                                       description='Select one command',
                                       dest='command')

    parser_sandbox = subparsers.add_parser('sandbox',
                                           description='Creates sandbox from either manifest file or build number')
    parser_build = subparsers.add_parser('build', description='Do a build in the sandbox created')
    parser_package = subparsers.add_parser('package', description='Package build')
    parser_all = subparsers.add_parser('all', description='Perform all the functions: sandbox, build, package')

    opt = parser.parse_args(args)
    return opt


if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    NOPRINT = options.no_print
    build = ContrailBuild(options)

    """ Test to make sure all our commands exist """

	
    if not cmd_exists("git"):
        print "Missing git command"
        sys.exit(1)
 
    if not cmd_exists("repo"):
        print "Missing repo command"
        sys.exit(1)

    if not cmd_exists("scons"):
        print "Missing scons command"
        sys.exit(1)

    if build.opt.command == 'sandbox':
        build.sandbox()
        sys.exit(0)

    if build.opt.command == 'build':
        build.build()
        sys.exit(0)

    if build.opt.command == 'package':
        build.package()
        sys.exit(0)

    if build.opt.command == 'all':
        build.sandbox()
        build.build()
        build.package()
        sys.exit(0)

    print "Unknown command: ", build.opt.command
    sys.exit(1)

# Local Variables:
# mode: python
# End:
