#!/usr/bin/python

import argparse
import os
import sys
import subprocess
import shutil
from lxml import etree as ET
import base64


class ConfigCreate(object):
    def __init__(self, options):
        self.opt = options

        if not os.path.isfile (self.opt.manifest_file):
            print "Error: Can't find file %s" % self.opt.manifest_file
            sys.exit(1)

        if not self.opt.build_id:
            print "No build id specified.  Using 1001"
            self.opt.build_id = '1001'


    def create(self):
        if DEBUG:
            print "Create called"

        source = ET.parse(self.opt.manifest_file).getroot()
        f = open (self.opt.output_file, 'w')
        f.write ("[config]\n")
        f.write ("store_dir = ../../../store/\n")
        out = "build_id = " + self.opt.build_id + "\n"
        f.write (out)

        for item in source.iter('label'):
            if DEBUG:
                print "Found a label"
            t = item.get ('name')
            v = item.get ('value')
            out = t + " = " + v + "\n"
            if DEBUG:
                print "what is getting printed to file: %s" % out
            f.write(out)

        f.close()




def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='merge-manifest to create manifest based on build manifest')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-b',  '--build_id', nargs='?', dest='build_id',
                        help='Build ID to write into the config file.')

    parser.add_argument('-m',  '--manifest', nargs='?', dest='manifest_file',
                            default='manifest.xml',
                            help='Manifest to read config parameters from, default: %(default)s')

    parser.add_argument('-o',  '--output', nargs='?', dest='output_file',
                            default='config.cfg',
                            help='Output file to write configuration to, default: %(default)s')


    subparsers = parser.add_subparsers(title='Create config Commands',
                                       description='Select one command',
                                       dest='command')

    parser_merge = subparsers.add_parser('config',
                                           description='Merge the target into source keeping the source revisions'
                                                       'the same and fixing the new projects revisions')


    opt = parser.parse_args(args)
    return opt

if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    config = ConfigCreate(options)


    result = config.create()
    print "Done"
    sys.exit(0)



